/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.7.0 (NJsonSchema v10.3.9.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IImagesClient {
    upload(uploadedImage: FileParameter | null | undefined): Promise<ProductImage>;
}

export class ImagesClient implements IImagesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    upload(uploadedImage: FileParameter | null | undefined): Promise<ProductImage> {
        let url_ = this.baseUrl + "/api/Images";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (uploadedImage !== null && uploadedImage !== undefined)
            content_.append("uploadedImage", uploadedImage.data, uploadedImage.fileName ? uploadedImage.fileName : "uploadedImage");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpload(_response);
        });
    }

    protected processUpload(response: Response): Promise<ProductImage> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductImage.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductImage>(<any>null);
    }
}

export interface IProductsClient {
    getProducts(): Promise<ProductListDTO>;
    create(command: CreateProductCommand): Promise<number>;
    getProductDetail(id: number): Promise<ProductDetailsDTO>;
}

export class ProductsClient implements IProductsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getProducts(): Promise<ProductListDTO> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProducts(_response);
        });
    }

    protected processGetProducts(response: Response): Promise<ProductListDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductListDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductListDTO>(<any>null);
    }

    create(command: CreateProductCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    getProductDetail(id: number): Promise<ProductDetailsDTO> {
        let url_ = this.baseUrl + "/api/Products/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProductDetail(_response);
        });
    }

    protected processGetProductDetail(response: Response): Promise<ProductDetailsDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductDetailsDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductDetailsDTO>(<any>null);
    }
}

export abstract class BaseEntity implements IBaseEntity {
    createdDate?: Date;
    modifiedDate?: Date | undefined;
    modifiedBy?: string | undefined;
    createdBy?: string | undefined;
    isDeleted?: boolean;

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.modifiedBy = _data["modifiedBy"];
            this.createdBy = _data["createdBy"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["modifiedBy"] = this.modifiedBy;
        data["createdBy"] = this.createdBy;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface IBaseEntity {
    createdDate?: Date;
    modifiedDate?: Date | undefined;
    modifiedBy?: string | undefined;
    createdBy?: string | undefined;
    isDeleted?: boolean;
}

export class ProductImage extends BaseEntity implements IProductImage {
    productImageId?: number;
    imageName?: string | undefined;
    isMainImage?: boolean;
    productId?: number | undefined;
    fullFilePath?: string | undefined;
    product?: Product | undefined;

    constructor(data?: IProductImage) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.productImageId = _data["productImageId"];
            this.imageName = _data["imageName"];
            this.isMainImage = _data["isMainImage"];
            this.productId = _data["productId"];
            this.fullFilePath = _data["fullFilePath"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductImage {
        data = typeof data === 'object' ? data : {};
        let result = new ProductImage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productImageId"] = this.productImageId;
        data["imageName"] = this.imageName;
        data["isMainImage"] = this.isMainImage;
        data["productId"] = this.productId;
        data["fullFilePath"] = this.fullFilePath;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IProductImage extends IBaseEntity {
    productImageId?: number;
    imageName?: string | undefined;
    isMainImage?: boolean;
    productId?: number | undefined;
    fullFilePath?: string | undefined;
    product?: Product | undefined;
}

export class Product extends BaseEntity implements IProduct {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productDescription?: ProductDescription | undefined;
    productImages?: ProductImage[] | undefined;

    constructor(data?: IProduct) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.price = _data["price"];
            this.productDescription = _data["productDescription"] ? ProductDescription.fromJS(_data["productDescription"]) : <any>undefined;
            if (Array.isArray(_data["productImages"])) {
                this.productImages = [] as any;
                for (let item of _data["productImages"])
                    this.productImages!.push(ProductImage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["price"] = this.price;
        data["productDescription"] = this.productDescription ? this.productDescription.toJSON() : <any>undefined;
        if (Array.isArray(this.productImages)) {
            data["productImages"] = [];
            for (let item of this.productImages)
                data["productImages"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProduct extends IBaseEntity {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productDescription?: ProductDescription | undefined;
    productImages?: ProductImage[] | undefined;
}

export class ProductDescription extends BaseEntity implements IProductDescription {
    productId?: number;
    description?: string | undefined;
    product?: Product | undefined;

    constructor(data?: IProductDescription) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.productId = _data["productId"];
            this.description = _data["description"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductDescription {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["description"] = this.description;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IProductDescription extends IBaseEntity {
    productId?: number;
    description?: string | undefined;
    product?: Product | undefined;
}

export class ProductListDTO implements IProductListDTO {
    products?: ProductDTO[] | undefined;

    constructor(data?: IProductListDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(ProductDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductListDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductListDTO {
    products?: ProductDTO[] | undefined;
}

export class ProductDTO implements IProductDTO {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productImage?: string | undefined;

    constructor(data?: IProductDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.price = _data["price"];
            this.productImage = _data["productImage"];
        }
    }

    static fromJS(data: any): ProductDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["price"] = this.price;
        data["productImage"] = this.productImage;
        return data; 
    }
}

export interface IProductDTO {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productImage?: string | undefined;
}

export class CreateProductCommand implements ICreateProductCommand {
    productName?: string | undefined;
    price?: number;
    productDescription?: string | undefined;
    images?: AddedImageDTO[] | undefined;

    constructor(data?: ICreateProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productName = _data["productName"];
            this.price = _data["price"];
            this.productDescription = _data["productDescription"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(AddedImageDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["price"] = this.price;
        data["productDescription"] = this.productDescription;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateProductCommand {
    productName?: string | undefined;
    price?: number;
    productDescription?: string | undefined;
    images?: AddedImageDTO[] | undefined;
}

export class AddedImageDTO implements IAddedImageDTO {
    productImageId?: number;
    isMainImage?: boolean;

    constructor(data?: IAddedImageDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productImageId = _data["productImageId"];
            this.isMainImage = _data["isMainImage"];
        }
    }

    static fromJS(data: any): AddedImageDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AddedImageDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productImageId"] = this.productImageId;
        data["isMainImage"] = this.isMainImage;
        return data; 
    }
}

export interface IAddedImageDTO {
    productImageId?: number;
    isMainImage?: boolean;
}

export class ProductDetailsDTO implements IProductDetailsDTO {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productImages?: ProductImage[] | undefined;
    productDescription?: string | undefined;

    constructor(data?: IProductDetailsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.price = _data["price"];
            if (Array.isArray(_data["productImages"])) {
                this.productImages = [] as any;
                for (let item of _data["productImages"])
                    this.productImages!.push(ProductImage.fromJS(item));
            }
            this.productDescription = _data["productDescription"];
        }
    }

    static fromJS(data: any): ProductDetailsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetailsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["price"] = this.price;
        if (Array.isArray(this.productImages)) {
            data["productImages"] = [];
            for (let item of this.productImages)
                data["productImages"].push(item.toJSON());
        }
        data["productDescription"] = this.productDescription;
        return data; 
    }
}

export interface IProductDetailsDTO {
    productId?: number;
    productName?: string | undefined;
    price?: number;
    productImages?: ProductImage[] | undefined;
    productDescription?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}